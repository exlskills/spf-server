<!-- Libs JS -->
{{#not mobile}}
<script src="/learn-en/assets/libs/spfjs/spf.js"></script>
<script>
    spf.init();
</script>
{{/not}}
<script src="/learn-en/assets/libs/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="/learn-en/assets/libs/chart.js/dist/Chart.min.js"></script>
<script src="/learn-en/assets/libs/chart.js/Chart.extension.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/languages/go.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/languages/yaml.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/languages/dockerfile.min.js"></script>
<!-- TODO add libs back when required -->
<!--<script src="/learn-en/assets/libs/flatpickr/dist/flatpickr.min.js"></script>-->
<!--<script src="/learn-en/assets/libs/jquery-mask-plugin/dist/jquery.mask.min.js"></script>-->
<!--<script src="/learn-en/assets/libs/list.js/dist/list.min.js"></script>-->
<!--<script src="/learn-en/assets/libs/quill/dist/quill.min.js"></script>-->
<!--<script src="/learn-en/assets/libs/dropzone/dist/min/dropzone.min.js"></script>-->
<script src="/learn-en/assets/libs/select2/dist/js/select2.min.js"></script>
<script src="/learn-en/assets/libs/toastr/toastr.min.js"></script>
<script src="/learn-en/assets/libs/moment/moment.min.js"></script>
<script src="/learn-en/assets/libs/moment-timezone/moment-timezone-with-data-2012-2022.min.js"></script>
<script src="https://unpkg.com/nprogress@0.2.0/nprogress.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.8.6/showdown.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/intro.js/2.9.3/intro.min.js"></script>

<!-- Theme JS -->
<script src="/learn-en/assets/js/theme.min.js"></script>

<script>
    NProgress.configure({ showSpinner: false });
    NProgress.configure({ trickleSpeed: 75 });
    $(document).on("spfclick", function() {
        // Show progress bar
        NProgress.start();
    });

    $(document).on("spfrequest", function() {
        // Increment progress as request is made
        NProgress.inc();
    });

    $(document).on("spfprocess", function() {
        // Set progress bar width to 100%
        NProgress.done();
    });

    function setupCodeHLJS() {
        $(".course-card-body pre code:not([class*='hljs'])").each(function() {
            hljs.highlightBlock($(this).get(0))
        });
    }

    $(document).on("spfdone", function() {
        // Finish request and remove progress bar
        NProgress.remove();
        setupCodeHLJS();
    });

    setupCodeHLJS();
</script>
<script>
    $.postJSON = function(url, data, success, error) {
        if (typeof data !== 'string') {
            data = JSON.stringify(data);
        }
        $.ajax({
            url : url,
            type: "post",
            data: data,
            dataType: "json",
            contentType: "application/json",
            success: success,
            error: error,
            xhrFields: {
                withCredentials: true
            },
            crossDomain: true
        });
    }
    function uuidv4() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
</script>
<script>
    $.escapeLiteralSel = function(sel) {
        return sel.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g,'\\$1')
    }
</script>
<script>
    $('.user-logout-btn').click(function(e) {
      e.preventDefault();
      $.postJSON('{{config.authAPIBaseURL}}/me/logout', {}, function(resp) {
        window.location.href = '{{{config.logoutURL}}}';
      });
    })
</script>
<script>
    function refreshJWT(callback, errorCallback) {
        $.ajax({
            url : '{{config.authAPIBaseURL}}/auth/jwt-refresh?'+(new Date()).getTime(),
            type: "get",
            success: callback,
            error: errorCallback,
            xhrFields: {
                withCredentials: true
            },
            crossDomain: true
        });
    }
</script>
<script>
    $(function() {
        var modalIds = ['modalManageCoins', 'modalAddCard', 'modalCheckout'];
        modalIds.forEach(function(id) {
            $('#'+id).on('hide.bs.modal', function() {
                window.location.hash = '';
            });
        });
        function showModalsWhenHashEq() {
            modalIds.forEach(function(id) {
                if (window.location.hash.indexOf('#!'+id) > -1) {
                    if (window.location.hash === '#!modalManageCoins=min_ic' || window.location.hash === "#!modalAddCard=min_ic") {
                        Intercom('hide');
                    }
                    $('#'+id).modal('show');
                }
            });
        }
        $(window).on('hashchange', function() {
            showModalsWhenHashEq();
        });
        showModalsWhenHashEq();
    });
    $(function() {
        $('[data-tooltip="true"]').tooltip();
    });
</script>
<script>
    $(function() {
        if (!window.localStorage.toastOnLoad || window.localStorage.toastOnLoad === "") {
            return;
        }
        var t = JSON.parse(window.localStorage.toastOnLoad);
        switch (t.intent) {
            case 'error':
                toastr.error(t.message, t.title);
                break;
            case 'warning':
                toastr.warning(t.message, t.title);
                break;
            case 'success':
                toastr.success(t.message, t.title);
                break;
            default:
                toastr.info(t.message, t.title);
                break;
        }
        window.localStorage.removeItem('toastOnLoad');
    })
</script>
<script>
    Chart.pluginService.register({
        beforeDraw: function (chart) {
            if (chart.config.options.elements.center) {
                //Get ctx from string
                var ctx = chart.chart.ctx;

                //Get options from the center object in options
                var centerConfig = chart.config.options.elements.center;
                var fontStyle = centerConfig.fontStyle || 'Arial';
                var txt = centerConfig.text;
                var color = centerConfig.color || '#000';
                var sidePadding = centerConfig.sidePadding || 20;
                var sidePaddingCalculated = (sidePadding/100) * (chart.innerRadius * 2)
                //Start with a base font of 30px
                ctx.font = "30px " + fontStyle;

                //Get the width of the string and also the width of the element minus 10 to give it 5px side padding
                var stringWidth = ctx.measureText(txt).width;
                var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

                // Find out how much the font can grow in width.
                var widthRatio = elementWidth / stringWidth;
                var newFontSize = Math.floor(30 * widthRatio);
                var elementHeight = (chart.innerRadius * 2);

                // Pick a new font size so it will not be larger than the height of label.
                var fontSizeToUse = Math.min(newFontSize, elementHeight);

                //Set font settings to draw it correctly.
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
                var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);
                ctx.font = fontSizeToUse+"px " + fontStyle;
                ctx.fillStyle = color;

                //Draw text in center
                ctx.fillText(txt, centerX, centerY);
            }
        }
    });
</script>
<script>
    function setupThemeModeToggle() {
        var toggle = document.querySelector('#theme-mode-toggle');

        function updateToggleState() {
            document.querySelector('#theme-mode-toggle').checked = themeMode === 'dark';
        }

        function toggleThemeMode() {

            // Update localStorage
            if (toggle.checked === true) {
                localStorage.setItem('themeMode', 'dark');
            } else {
                localStorage.setItem('themeMode', 'light');
            }

            $('#theme-mode-toggle').attr('disabled', 'disabled')

            // Reload window
            location.reload(true);
        }

        //
        // Events
        //

        if (document.querySelector('#theme-mode-toggle')) {

            var updateListener = function() {
                // Toggle theme mode
                document.querySelector('#theme-mode-toggle').addEventListener('change', function() {
                    toggleThemeMode();
                });
            }

            $(document).on("spfdone", function() {
                updateToggleState();
                updateListener();
            });

            // Update toggle state
            window.addEventListener('load', function() {
                updateToggleState();
            });

            updateListener();
        }

    }
    $(setupThemeModeToggle);
</script>
<script>
    var gqlEndpoint = '{{config.gqlEndpoint}}';
</script>
{{#not mobile}}
<script>(function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/sa0gkscf';var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})()</script>
<script>
    $(function() {
        $.postJSON('{{{config.authAPIBaseURL}}}/intercom-user-hash', {}, function(resp) {
            window.Intercom('boot', {
                app_id: '{{{config.intercomAppID}}}',
                name: '{{user.full_name}}',
                user_id: '{{{user.id}}}',
                email: '{{{user.email}}}',
                user_hash: resp.userIdHash
            })
        });
    });
</script>
{{/not}}
<script>
    var _WSCQ_quiz_currentUserWorkspace = null;
    var _WSCQ_quiz_currentUserWorkspaceId = null;
    window.addEventListener('message', function(evt) {
        try {
            var data = JSON.parse(evt.data)
            if (data && data.event === 'workspace.changed' && data.workspaceId === _WSCQ_quiz_currentUserWorkspaceId) {
                _WSCQ_quiz_currentUserWorkspace = JSON.stringify(data.payload);
            }
        } catch (error) {
            console.log('invalid iframe msg: ', evt, ',ignoring error: ', error)
        }
    });
</script>
<script>
    function subscribeToMailingList(email, campaign, onSuccess, onFailure) {
        $.postJSON('{{{config.authAPIBaseURL}}}/mailing-list', {
            email: email,
            campaign: campaign,
            formUrl: window.location.href
        }, onSuccess, onFailure);
    }
</script>
{{> ftue-tour}}
<script>
    console.log(`
    _____            __                  ________  __    __  __                  __        __  __  __
   /     |          /  |                /        |/  |  /  |/  |                /  |      /  |/  |/  |
   $$$$$ |  ______  $$/  _______        $$$$$$$$/ $$ |  $$ |$$ |        _______ $$ |   __ $$/ $$ |$$ |  _______
      $$ | /      \\ /  |/       \\       $$ |__    $$  \\/$$/ $$ |       /       |$$ |  /  |/  |$$ |$$ | /       |
 __   $$ |/$$$$$$  |$$ |$$$$$$$  |      $$    |    $$  $$<  $$ |      /$$$$$$$/ $$ |_/$$/ $$ |$$ |$$ |/$$$$$$$/
/  |  $$ |$$ |  $$ |$$ |$$ |  $$ |      $$$$$/      $$$$  \\ $$ |      $$      \\ $$   $$<  $$ |$$ |$$ |$$      \\
$$ \\__$$ |$$ \\__$$ |$$ |$$ |  $$ |      $$ |_____  $$ /$$  |$$ |_____  $$$$$$  |$$$$$$  \\ $$ |$$ |$$ | $$$$$$  |
$$    $$/ $$    $$/ $$ |$$ |  $$ |      $$       |$$ |  $$ |$$       |/     $$/ $$ | $$  |$$ |$$ |$$ |/     $$/
 $$$$$$/   $$$$$$/  $$/ $$/   $$/       $$$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/  $$/   $$/ $$/ $$/ $$/ $$$$$$$/

Email jobs@exlskills.com and check out our open work at https://github.com/exlskills to join us today!

    `)
</script>
